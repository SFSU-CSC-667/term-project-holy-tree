<div class='game-wrapper'> 
  
  <div class='game-board'>
    <div class='round-info'>
      <p id='counter'>Game Starting Soon</p>
    </div>
    <div class='players'>
      {{#each users }}
        {{> player_card this }}
      {{/each}}
    </div>
  </div>

  <div class='player-console'>
    <div class="game-chat">
      <ul id="messages"></ul>
      <form>
        <input type="text" id="message-input">
        <button type="submit">Send</button>
      </form>
    </div>
    <div class="game-info">
      <div class="player-game-info"></div>
    </div>
  </div>

</div>


<script type="text/javascript">
  let socket = io.connect();
  let user_id = '{{ user_id }}';
  let name = '{{ name }}';
  let game_id = '{{ game_id }}';
  let role_info = {};

  const registerPlayerClickListener = function () {
    $('.player-card').on('click', function () {
      if ( role_info.action && $(this).data('id') != user_id ) {
        $('.player-card .name').css('color','white');
        $(this).find('.name').css('color','red');
        socket.emit('night action', { id: user_id, role: role_info.title, target: $(this).data('id'), game_id: game_id } );
        $('#messages').append($('<li>').addClass('self').html(`You have targeted <strong>${$(this).find('.name').text()}</strong>`));
      }
    });
  }

  const displayCountdown = function( duration ) {
    let counter = duration;
    let interval = setInterval( function() {
      counter--;
      let minutes = Math.floor( counter / 60 );
      let seconds = ( counter % 60 < 10 ) ? '0' + counter % 60 : counter % 60;
      $('#counter').text(`${minutes}:${seconds}`);
      if ( counter == 0 ) { clearInterval(interval); }
    }, 1000);
  };
  const registerNightPhaseTimeout = function( duration ) {
    let timeout = setTimeout( function() {
      $('#counter').text('Day Phase Starting Soon');
      $('#messages').append($('<li>').addClass('phase').html('DAY PHASE STARTING'));
      clearTimeout( timeout );
    }, duration * 1000 );
  }
  const registerDayPhaseTimeout = function( duration ) {
    let timeout = setTimeout( function() {
      $('#counter').text('Voting Phase Starting Soon');
      $('#messages').append($('<li>').addClass('phase').html('VOTING PHASE STARTING'));
      clearTimeout( timeout );
    }, duration * 1000 );
  }

  const registerVotingPhaseTimeout = function ( duration ) {
    let timeout = setTimeout( function() {
      clearTimeout( timeout );
    }, duration * 1000 );
  }
  socket.emit( 'subscribe to game', { game_id: game_id, user_id: user_id  } );
  /* CHAT Handlers */
  $('form').submit( function(){
    socket.emit('chat message', { message: $('#message-input').val(), name: name, game_id: game_id });
    $('#message-input').val('');
    return false;
  });

  socket.on('chat message', function( msg ) {
    $('#messages').append($('<li>').html(`<strong>${msg['name']}:</strong> ${msg['message']}`));
    $("#messages").scrollTop($("#messages")[0].scrollHeight);
  });

  /* PLAYER Handlers */
  socket.on('player joined', function( data ) {
    if (data.id != user_id) {
      $('.players').append(Handlebars.templates.player_card( data ));
    }
    $('#game-player-count').text(data.player_count);
    registerPlayerClickListener();
  });

  socket.on('night phase starting', function( data ) {
      $('#messages').append($('<li>').addClass('phase').html('NIGHT PHASE STARTING'));
      $('.player-game-info').html('');
      $('.player-game-info').append(Handlebars.templates.player_game_info( data ));
      role_info = data;
      displayCountdown( data.duration );
      registerNightPhaseTimeout( data.duration );
  });

  socket.on('day phase starting', function( data ) {
      $('.player-card .name').css('color','white');
      $('.player-card').prop('onclick',null);
      $('.player-game-info').html('');
      $('.player-game-info').append(Handlebars.templates.player_game_info( data ));
      role_info = data;
      if ( role_info.item ) { $('.player-card .item').text(`ITEM: ${role_info.item}`); }
      displayCountdown( data.duration );
      registerDayPhaseTimeout( data.duration );
  });
  
  socket.on('voting phase starting', function( phase_data ) {
    $('.player-card').on('click', function () {
        $('.player-card .name').css('color','white');
        $(this).find('.name').css('color','red');
        socket.emit( 'player vote', { game: game_id, id: user_id, target: $(this).data('id')  } );
        $('#messages').append($('<li>').addClass('self').html(`You have voted for <strong>${$(this).find('.name').text()}</strong>`));
    });
    displayCountdown( phase_data.duration );
    registerVotingPhaseTimeout( phase_data.duration );
  });

  socket.on('voting phase ended', function ( results ) {
    console.log("VOTING PHASE ENDED: ", results);
    $('.players').html('').append(Handlebars.templates.results_display( results ));
  });
</script>